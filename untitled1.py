# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iXBApKxPM44lNCcVQJNlzo2Ala8MDVEO
"""

# Importing necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
# Example: Load the diabetes dataset (you can replace this with any other dataset for disease prediction)
url = "https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv"
columns = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']

data = pd.read_csv(url, names=columns)

# Step 1: Exploratory Data Analysis (EDA)
print("First few rows of the dataset:")
print(data.head())

print("\nSummary Statistics:")
print(data.describe())

# Checking for missing values
print("\nMissing values in the dataset:")
print(data.isnull().sum())

# Step 2: Data Preprocessing
# In this dataset, there are no missing values, but in other cases, you may want to handle missing data (imputation).
# Scaling the features using StandardScaler
features = data.drop('Outcome', axis=1)
target = data['Outcome']

scaler = StandardScaler()
scaled_features = scaler.fit_transform(features)

# Step 3: Splitting the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(scaled_features, target, test_size=0.2, random_state=42)

# Step 4: Building the Model (Logistic Regression)
model = LogisticRegression()
model.fit(X_train, y_train)

# Step 5: Predicting on the test set
y_pred = model.predict(X_test)

# Step 6: Evaluating the Model
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
report = classification_report(y_test, y_pred)

print("\nModel Accuracy: {:.2f}%".format(accuracy * 100))
print("\nConfusion Matrix:")
print(conf_matrix)

print("\nClassification Report:")
print(report)

# Step 7: Visualizing the Confusion Matrix
plt.figure(figsize=(6, 4))
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues", xticklabels=['No Diabetes', 'Diabetes'], yticklabels=['No Diabetes', 'Diabetes'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()